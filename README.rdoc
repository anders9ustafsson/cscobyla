=cscobyla

Constrained Optimization BY Linear Approximation for .NET

COBYLA2 is an implementation of Powell’s nonlinear derivative–free constrained optimization that uses a linear approximation approach. 
The algorithm is a sequential trust–region algorithm that employs linear approximations to the objective and constraint functions, 
where the approximations are formed by linear interpolation at n + 1 points in the space of the variables and tries to maintain a 
regular–shaped simplex over iterations.

It solves nonsmooth NLP with a moderate number of variables (about 100). Inequality constraints only.

The initial point X is taken as one vertex of the initial simplex with zero being another, so, X should not be entered as the zero vector.

==References

This is a C# version of Mike Powell's F77 implementation of COBYLA2, available at ftp://plato.la.asu.edu/pub/other_software/cobyla2.tar.gz

The C# version is a straightforward translation of Alan Miller's F90 port, available at ftp://plato.la.asu.edu/pub/other_software/cobyla2_f90.tar.gz

Mike Powell's paper on Direct Search methods is available at http://www.damtp.cam.ac.uk/user/na/NA_papers/NA1998_04.ps.gz

==Usage

The C# implementation is relatively faithful to the original Fortran 77 and 90 implementations. It should be noted however that the  
indexing of the variables and constraints arrays in the _public_ interface is zero-based, i.e. for a problem with 3 variables, x[0],
x[1] and x[2] should be employed in the objective and constraints function evaluations.

Implement a method for computing objective function and (potentially) constraints functions with the following signature:

    void calcfc(int n, int m, double[] x, out double f, double[] con)

where _n_ is the number of variables, _m_ is the number of constraints, _x_ is the variable array, _f_ is the calculated objective
function value and _con_ is the array of calculated constraints function values.

To minimize the objective function subject to constraints, call one of the two overloaded _Cobyla2.Minimize_ methods:

    double[] Minimize(CalcfcDelegate calcfc, int n, int m, double[] xin, 
                      double rhobeg, double rhoend, int iprint, int maxfun, 
                      out double f, out double[] con, out int iters);

    double[] Minimize(CalcfcDelegate calcfc, int n, int m, double[] xin, 
                      double rhobeg, double rhoend, int iprint, int maxfun);

where _xin_ is the initial variable array, _rhobeg_ and _rhoend_ are the initial and final values of the simplex, _iprint_ (0..3)
specifies the level of output to the console, _maxfun_ is the maximum allowed number of function evaluations, _f_ is the objective
function value and _con_ the constraints function values at variables optimum and _iters_ is the actual number of function
evaluations performed in the optimization. Both methods return the optimal obtained variable values.

The latter of the two overloaded methods also implements default values as follows: _rhobeg_ = 0.5, _rhoend_ = 1.0e-6,
_iprint_ = 2 and _maxfun_ = 3500. The method can thus optionally be called as follows, employing the default parameter values in the
minimization:

    var xout = Cobyla2.Minimize(calcfc, n, m, xin);

The file Cobyla2.cs can be included as-is in any C# project, .NET Framework 4.0 or later.

==The MIT License

Copyright (c) 2012 Anders Gustafsson, Cureos AB.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files 
(the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, 
publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE 
FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

==Revision history

* April 15, 2012: Added a section on usage.
* April 14, 2012: Added a more detailed presentation of the algorithm.  
* April 12, 2012: Initial document.
